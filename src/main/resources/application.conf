akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

akka.kafka.consumer {
  # Tuning property of scheduled polls.
  poll-interval = 10s

  # Tuning property of the `KafkaConsumer.poll` parameter.
  # Note that non-zero value means that blocking of the thread that
  # is executing the stage will be blocked.
  poll-timeout = 5s

  # If for any reason KafkaConsumer.poll blocks for longer than the configured
  # poll-timeout then forcefully woken up with KafkaConsumer.wakeup
  # The KafkaConsumerActor will throw
  # org.apache.kafka.common.errors.WakeupException which will be ignored
  # until max-wakeups limit gets exceeded.
  wakeup-timeout = 10s

  # If enabled log stack traces before waking up the KafkaConsumer to give
  # some indication why the KafkaConsumer is not honouring the poll-timeout
  wakeup-debug = false

  # Properties defined by org.apache.kafka.clients.consumer.ConsumerConfig
  # can be defined in this configuration section.
  kafka-clients {
    # Disable auto-commit by default
    enable.auto.commit = false
  }
}

akka.kafka.committer {
  max-batch = 1000
  max-batch = ${?KAFKA_COMMITTER_MAX_BATCH}
  # Max interval in milliseconds
  max-interval = 5000
  max-interval = ${?KAFKA_COMMITTER_MAX_INTERVAL}
}

postgres {
  host = localhost
  host = ${?POSTGRES_HOST}
  port = 5432
  port = ${?POSTGRES_PORT}
  db = models_dev
  db = ${?POSTGRES_DB}
  user = "postgres"
  user = ${?POSTGRES_USER}
  password = "password"
  password = ${?SECRET_POSTGRES_PASSWORD}
  log-queries-ms-threshold = 1000
  log-queries-ms-threshold = ${?LOG_PG_QUERIES_MS_THRESHOLD}
}

db {
  default {
    driver="org.postgresql.Driver"
    url="jdbc:postgresql://"${postgres.host}":"${postgres.port}"/"${postgres.db}
    user = ${postgres.user}
    password = ${postgres.password}
  }
}

kafka {
  host = localhost
  host = ${?KAFKA_HOST}
  port = 9092
  port = ${?KAFKA_PORT}
  topics {
    prefix = "dev"
    prefix = ${?KAFKA_TOPIC_PREFIX}
    models = ${kafka.topics.prefix}".models"
  }
}

stream {
  max-actions-to-accumulate = 1000
  max-actions-to-accumulate = ${?MAX_ACTIONS_TO_ACCUMULATE}
  # In milliseconds
  max-duration-to-accumulate = 1000
  max-duration-to-accumulate = ${?MAX_DURATION_TO_ACCUMULATE}
}

prometheus.webserver {
  host = localhost
  host = ${?PROMETHEUS_HOST}
  port = 12345
  port = ${?PROMETHEUS_PORT}
}

prometheus.akka {
  match.events = true
  metric.filters {
    akka-actor {
      includes = []
      excludes = [ "**" ]
    }

    akka-router {
      includes = []
      excludes = ["**"]
    }

    akka-dispatcher {
      includes = []
      excludes = ["**"]
    }
  }
}

sentry {
  use-sentry = false
  use-sentry = ${?USE_SENTRY}
}
